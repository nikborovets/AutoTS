#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Prometheus —Å AutoTS –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
"""

import pandas as pd
import numpy as np
from autots import AutoTS
from autots.data_loader import fetch_frame
import matplotlib.pyplot as plt
import warnings
import argparse
import logging
import os
import io
import sys
from contextlib import contextmanager
warnings.filterwarnings('ignore')

@contextmanager
def capture_to_logging(logger):
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ stdout –∏ stderr –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Ö –≤ –ª–æ–≥–≥–µ—Ä.
    """
    original_stdout = sys.stdout
    original_stderr = sys.stderr
    
    class LoggingWriter(io.TextIOBase):
        def __init__(self, logger, level):
            self.logger = logger
            self.level = level
            self.buffer = ''

        def write(self, string):
            # –ë—É—Ñ–µ—Ä–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
            self.buffer += string
            lines = self.buffer.split('\\n')
            for line in lines[:-1]:
                if line.strip():
                    self.logger.log(self.level, line.strip())
            self.buffer = lines[-1]
            return len(string)

        def flush(self):
            if self.buffer.strip():
                self.logger.log(self.level, self.buffer.strip())
            self.buffer = ''

    log_stdout = LoggingWriter(logger, logging.INFO)
    log_stderr = LoggingWriter(logger, logging.ERROR)

    sys.stdout = log_stdout
    sys.stderr = log_stderr
    try:
        yield
    finally:
        log_stdout.flush()
        log_stderr.flush()
        sys.stdout = original_stdout
        sys.stderr = original_stderr


def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    log_dir = 'logs'
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    log_file = os.path.join(log_dir, 'autots_run.log')
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–∞—Ö
    # –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ä–µ–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, Jupyter)
    for handler in logging.root.handlers[:]:
        logging.root.removeHandler(handler)
        
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s [%(levelname)s] - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
        handlers=[
            logging.FileHandler(log_file),
            logging.StreamHandler()  # –î—É–±–ª–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        ]
    )
    logging.info("–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")


def run_prometheus_autots_prediction(
    days=7,
    start_date="2025-04-27 18:00:00", 
    end_date="2025-05-13 11:41:00",
    forecast_length=24,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö step)
    use_cache=True,
    verbose=True
):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ AutoTS –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Prometheus
    
    Args:
        days: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        start_date: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
        end_date: –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞  
        forecast_length: –¥–ª–∏–Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –ø–µ—Ä–∏–æ–¥–∞—Ö
        use_cache: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
        verbose: –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (model, prediction, forecast_df)
    """
    
    logging.info("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Prometheus...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    df = fetch_frame(
        days=days,
        start_date=start_date,
        end_date=end_date,
        use_cache=use_cache,
        verbose=verbose
    )
    
    if df.empty:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Prometheus")
    
    logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π —Å {len(df.columns)} –º–µ—Ç—Ä–∏–∫–∞–º–∏")
    logging.info(f"üìä –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {df.index.min()} - {df.index.max()}")
    logging.info(f"üìà –ú–µ—Ç—Ä–∏–∫–∏: {list(df.columns)}")
    
    # –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º NaN
    df_clean = df.dropna(axis=1, thresh=len(df) * 0.7)  # —É–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å >30% NaN
    
    if df_clean.empty:
        raise ValueError("–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã")
    
    logging.info(f"üßπ –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(df_clean.columns)} –º–µ—Ç—Ä–∏–∫")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AutoTS –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    model_config = {
        'forecast_length': forecast_length,
        'frequency': 'infer',  # AutoTS –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —á–∞—Å—Ç–æ—Ç—É
        'prediction_interval': 0.9,
        # 'max_generations': 50,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        'max_generations': 5,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        'num_validations': 1,   # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–π
        # 'num_validations': 3,   # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–π
        'validation_method': 'backwards',
        # 'models_to_validate': 0.2,  # –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø 20% –º–æ–¥–µ–ª–µ–π
        'models_to_validate': 0.1,  # –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø 20% –º–æ–¥–µ–ª–µ–π
        # 'model_list': 'fast',   # –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–µ –º–æ–¥–µ–ª–∏
        'model_list': 'superfast',   # –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–µ –º–æ–¥–µ–ª–∏
        # 'transformer_list': 'fast',
        'transformer_list': 'superfast',
        # 'ensemble': [
        #     'horizontal-max',   # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω—Å–∞–º–±–ª—å
        #     'mosaic-weighted-0-20',  # –º–æ–∑–∞–∏—á–Ω—ã–π –∞–Ω—Å–∞–º–±–ª—å
        # ],
        'ensemble': None,
        'metric_weighting': {
            'smape_weighting': 5,      # SMAPE - –æ—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞
            'mae_weighting': 2,        # MAE
            'rmse_weighting': 1,       # RMSE
            'spl_weighting': 3,        # Scaled Pinball Loss
            'containment_weighting': 0.1,  # –ø–æ–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            'runtime_weighting': 0.05,     # –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        },
        'n_jobs': 'auto',
        'verbose': 1 if verbose else 0,
        'random_seed': 2024,
        'no_negatives': True,  # –∏—Å–∫–ª—é—á–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã (–¥–ª—è –º–µ—Ç—Ä–∏–∫)
    }
    
    logging.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é AutoTS –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å AutoTS
    model = AutoTS(**model_config)
    
    logging.info("üèãÔ∏è –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...")
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    with capture_to_logging(logging.getLogger()):
        model = model.fit(df_clean)
    
    logging.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    logging.info(f"üéØ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {model.best_model_name}")
    logging.info(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏: {model.best_model_params}")
    
    # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    logging.info("üîÆ –î–µ–ª–∞—é –ø—Ä–æ–≥–Ω–æ–∑...")
    with capture_to_logging(logging.getLogger()):
        prediction = model.predict()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    forecast_df = prediction.forecast
    upper_forecast = prediction.upper_forecast  
    lower_forecast = prediction.lower_forecast
    
    logging.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤ –Ω–∞ {len(forecast_df)} –ø–µ—Ä–∏–æ–¥–æ–≤")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ–ª–∏
    logging.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏:")
    results = model.results()
    best_model_results = results[results['ID'] == model.best_model_id]
    
    if not best_model_results.empty:
        metrics = ['smape', 'mae', 'rmse', 'spl']
        for metric in metrics:
            if metric in best_model_results.columns:
                value = best_model_results[metric].iloc[0]
                logging.info(f"  {metric.upper()}: {value:.4f}")
    
    return model, prediction, forecast_df


def plot_results(df_historical, forecast_df, upper_forecast, lower_forecast, 
                metric_name=None, save_plot=False):
    """
    –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
    """
    if metric_name is None:
        metric_name = df_historical.columns[0]
    
    plt.figure(figsize=(15, 8))
    
    # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    plt.plot(df_historical.index, df_historical[metric_name], 
             label='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', color='blue', linewidth=1.5)
    
    # –ü—Ä–æ–≥–Ω–æ–∑
    plt.plot(forecast_df.index, forecast_df[metric_name], 
             label='–ü—Ä–æ–≥–Ω–æ–∑', color='red', linewidth=2)
    
    # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    plt.fill_between(forecast_df.index, 
                     lower_forecast[metric_name], 
                     upper_forecast[metric_name],
                     alpha=0.3, color='red', label='–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª')
    
    plt.title(f'–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏: {metric_name}')
    plt.xlabel('–í—Ä–µ–º—è')
    plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    
    if save_plot:
        plt.savefig(f'forecast_{metric_name}.png', dpi=300, bbox_inches='tight')
        logging.info(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ forecast_{metric_name}.png")
    
    plt.show()


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    setup_logging()
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ AutoTS –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Prometheus.")
    parser.add_argument(
        '--step',
        type=str,
        default='all',
        choices=['all', 'initial', 'finetune'],
        help="–≠—Ç–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 'initial' - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∏—á–Ω—ã–π –ø–æ–∏—Å–∫, 'finetune' - —Ç–æ–ª—å–∫–æ —Ç–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞, 'all' - –æ–±–∞ —ç—Ç–∞–ø–∞."
    )
    parser.add_argument(
        '--template-path',
        type=str,
        default='prometheus_autots_template.csv',
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    )
    args = parser.parse_args()

    try:
        if args.step in ['initial', 'all']:
            logging.info("üöÄ –≠—Ç–∞–ø 1: –ü–µ—Ä–≤–∏—á–Ω—ã–π –ø–æ–∏—Å–∫ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏...")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
            model, prediction, forecast_df = run_prometheus_autots_prediction(
                days=7,
                start_date="2025-04-27 18:00:00",
                end_date="2025-05-13 11:41:00",
                forecast_length=48,
                use_cache=True,
                verbose=True
            )

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            df_historical = fetch_frame(
                days=7,
                start_date="2025-04-27 18:00:00",
                end_date="2025-05-13 11:41:00",
                use_cache=True,
                verbose=False
            )

            # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏
            if not forecast_df.empty and not df_historical.empty:
                metric_name = forecast_df.columns[0]
                plot_results(
                    df_historical,
                    prediction.forecast,
                    prediction.upper_forecast,
                    prediction.lower_forecast,
                    metric_name=metric_name,
                    save_plot=True
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            forecast_df.to_csv('prometheus_forecast.csv')
            logging.info("üíæ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ prometheus_forecast.csv")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω –º–æ–¥–µ–ª–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            model.export_template(args.template_path, models='best', n=5)
            logging.info(f"üíæ –®–∞–±–ª–æ–Ω –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {args.template_path}")

            logging.info("üéâ –≠—Ç–∞–ø 1 (–ø–µ—Ä–≤–∏—á–Ω—ã–π –ø–æ–∏—Å–∫) –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

        if args.step in ['finetune', 'all']:
            if args.step == 'finetune':
                logging.info("üöÄ –≠—Ç–∞–ø 2: –¢–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –∏–∑ —à–∞–±–ª–æ–Ω–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–Ω–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            run_finetuning(
                template_path=args.template_path,
                days=7,
                start_date="2025-04-27 18:00:00",
                end_date="2025-05-13 11:41:00",
                forecast_length=48
            )

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}", exc_info=True)
        raise


def run_finetuning(
    template_path='prometheus_autots_template.csv',
    days=7,
    start_date="2025-04-27 18:00:00",
    end_date="2025-05-13 11:41:00",
    forecast_length=48,
    use_cache=True,
    verbose=True
):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–Ω–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–¥–µ–ª–µ–π –∏–∑ —à–∞–±–ª–æ–Ω–∞.
    
    Args:
        template_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–∞ —Å –ª—É—á—à–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏.
        days, start_date, end_date: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
        forecast_length: –î–ª–∏–Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.
        use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à.
        verbose: –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥.
        
    Returns:
        –ö–æ—Ä—Ç–µ–∂ (model, prediction, forecast_df)
    """
    logging.info("\n\n" + "="*50)
    logging.info("‚öôÔ∏è  –ó–∞–ø—É—Å–∫–∞—é —Ç–æ–Ω–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª—É—á—à–∏—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ —à–∞–±–ª–æ–Ω–∞...")
    logging.info(f"üìÑ –®–∞–±–ª–æ–Ω: {template_path}")
    logging.info("="*50 + "\n")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    df = fetch_frame(
        days=days,
        start_date=start_date,
        end_date=end_date,
        use_cache=use_cache,
        verbose=verbose
    )
    
    if df.empty:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Prometheus –¥–ª—è —Ç—é–Ω–∏–Ω–≥–∞")
    
    df_clean = df.dropna(axis=1, thresh=len(df) * 0.7)
    if df_clean.empty:
        raise ValueError("–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—é–Ω–∏–Ω–≥–∞ –ø—É—Å—Ç—ã")

    logging.info(f"‚úÖ –î–ª—è —Ç—é–Ω–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_clean)} –∑–∞–ø–∏—Å–µ–π")

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    # –ú—ã —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º max_generations –∏ num_validations –¥–ª—è –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    model_config = {
        'forecast_length': forecast_length,
        'frequency': 'infer',
        'prediction_interval': 0.9,
        'max_generations': 20,  # –ë–æ–ª—å—à–µ –ø–æ–∫–æ–ª–µ–Ω–∏–π
        'num_validations': 2,   # –ë–æ–ª—å—à–µ –≤–∞–ª–∏–¥–∞—Ü–∏–π
        'validation_method': 'backwards',
        'models_to_validate': 0.3, # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –±–æ–ª—å—à–µ –º–æ–¥–µ–ª–µ–π –∏–∑ —Ç–æ–ø–∞
        'ensemble': ['horizontal-max', 'mosaic-weighted-0-20'], # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–Ω—Å–∞–º–±–ª–∏
        'metric_weighting': {
            'smape_weighting': 5,
            'mae_weighting': 2,
            'rmse_weighting': 1,
            'spl_weighting': 3,
            'containment_weighting': 0.1,
            'runtime_weighting': 0.05, # –ú–µ–Ω—å—à–µ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –≤—Ä–µ–º—è
        },
        'n_jobs': 'auto',
        'verbose': 1 if verbose else 0,
        'random_seed': 2024,
        'no_negatives': True,
    }

    logging.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é AutoTS –¥–ª—è —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    
    model = AutoTS(**model_config)
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ —Ç–µ, —á—Ç–æ –≤ —à–∞–±–ª–æ–Ω–µ (`method='only'`).
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.
    logging.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä—É—é –º–æ–¥–µ–ª–∏ –∏–∑ {template_path} –¥–ª—è —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    model_after_import = model.import_template(template_path, method='only')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª –ª–∏ import_template –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞ –º–æ–¥–µ–ª–∏
    if not isinstance(model_after_import, AutoTS):
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω. –ü–æ—Ö–æ–∂–µ, –º–µ—Ç–æ–¥ import_template –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É.")
        logging.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª prometheus_autots_template.csv –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –∫–æ–Ω—Ü–µ.")
        if isinstance(model_after_import, Exception):
            raise model_after_import
        raise TypeError(f"import_template –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(model_after_import)}")
    
    model = model_after_import

    logging.info("üèãÔ∏è –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–æ–Ω)...")
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    with capture_to_logging(logging.getLogger()):
        model = model.fit(df_clean)
    
    logging.info("‚úÖ –¢–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    logging.info(f"üéØ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –ø–æ—Å–ª–µ —Ç—é–Ω–∏–Ω–≥–∞: {model.best_model_name}")
    logging.info(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏: {model.best_model_params}")
    
    # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    logging.info("üîÆ –î–µ–ª–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ—Å–ª–µ —Ç—é–Ω–∏–Ω–≥–∞...")
    with capture_to_logging(logging.getLogger()):
        prediction = model.predict()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    forecast_df = prediction.forecast
    
    logging.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤ –Ω–∞ {len(forecast_df)} –ø–µ—Ä–∏–æ–¥–æ–≤")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ–ª–∏
    logging.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ —Ç—é–Ω–∏–Ω–≥–∞:")
    results = model.results()
    best_model_results = results[results['ID'] == model.best_model_id]
    
    if not best_model_results.empty:
        metrics = ['smape', 'mae', 'rmse', 'spl']
        for metric in metrics:
            if metric in best_model_results.columns:
                value = best_model_results[metric].iloc[0]
                logging.info(f"  {metric.upper()}: {value:.4f}")

    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏
    if not forecast_df.empty and not df_clean.empty:
        metric_name = forecast_df.columns[0]
        plot_results(
            df_clean, 
            prediction.forecast,
            prediction.upper_forecast,
            prediction.lower_forecast,
            metric_name=metric_name,
            save_plot=True
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    forecast_df.to_csv('prometheus_forecast_tuned.csv')
    logging.info("üíæ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ—Å–ª–µ —Ç—é–Ω–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ prometheus_forecast_tuned.csv")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω –º–æ–¥–µ–ª–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    model.export_template('prometheus_autots_template_tuned.csv', models='best', n=5)
    logging.info("üíæ –®–∞–±–ª–æ–Ω —Ç—é–Ω–∏–Ω–≥–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ prometheus_autots_template_tuned.csv")
    
    logging.info("üéâ –¢–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    return model, prediction, forecast_df


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    main() 